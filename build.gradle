import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.*

plugins {
  id 'java'
  id 'maven-publish'
  id 'jacoco'
  id 'application'
  // Manage optional dependencies in maven pom.
  id 'nebula.optional-base' version '6.0.0'
  id 'com.github.spotbugs' version '4.7.3'
  id "io.freefair.lombok" version "5.3.3.3"
  id 'org.owasp.dependencycheck' version '6.3.1'
}

ext {
  releaseVersion = project.findProperty('releaseVersion') ?: '2.2-SNAPSHOT'
  nexusBaseUrl = project.findProperty('nexusBaseUrl') ?: 'https://nexus.adaptris.net/nexus'
  mavenPublishUrl = project.findProperty('mavenPublishUrl') ?: nexusBaseUrl + '/content/repositories/snapshots'
  repoUsername = project.findProperty('repoUsername') ?: 'set in gradle.properties'
  repoPassword = project.findProperty('repoPassword') ?: 'set in gradle.properties'
  defaultNexusRepo = project.findProperty('defaultNexusRepo') ?: 'unknown'
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")

  componentName='Interlok Build/Verify Report'
  componentDesc="Generates issue format based on interlokVerify output"
  organizationName = "Adaptris Ltd"
  organizationUrl = "http://interlok.adaptris.net"
}

ext.testResourcesDir = { ->
  return "${project.projectDir}/src/test/resources".replaceAll("\\\\", "/")
}

ext.hostname = { ->
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    return System.getenv("COMPUTERNAME")
  }
  return System.getenv("HOSTNAME")
}

ext.propertyTemplate = { dir, filename ->
  def file = new File(dir, filename + "." + hostname())
  if (file.exists()) {
    return file.getName()
  }
  return filename
}

ext.hasGraphViz = { ->
  def app = "dot"
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    app = app + ".exe"
  }
  return System.getenv("PATH").split(File.pathSeparator).any{
    java.nio.file.Paths.get("${it}").resolve(app).toFile().exists()
  }
}

ext.gitBranchNameOrTimestamp = { branchName ->
  if (branchName.equals("HEAD") || branchName.equals("develop") || branchName.startsWith("release")) {
    return new Date().format('HH:mm:ss z');
  }
  return branchName;
}

ext.buildInfo = { ->
   new ByteArrayOutputStream().withStream { os ->
      exec {
        executable = "git"
        args = ["rev-parse", "--abbrev-ref", "HEAD"]
        standardOutput = os
      }
      def branchName = os.toString().replaceAll(System.lineSeparator(), "");
      return gitBranchNameOrTimestamp(branchName);
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
group   = 'com.adaptris.labs'
version = releaseVersion
applicationName = 'interlok-verify-report'
mainClassName  = 'com.adaptris.labs.verify.CreateVerifyReport'
distTar.enabled=false
distZip.enabled=false
generateLombokConfig.enabled = false
def versionDir = "$buildDir/version"

// Disable gradle module generation since we probably don't want
// xxx.module files in your repository.
allprojects {
  tasks.withType(Jar) {
    metaInf {
      from ("$rootDir") {
        include 'LICENSE*'
        include 'NOTICE*'
      }
    }
  }
  tasks.withType(GenerateModuleMetadata) {
    enabled = false
  }
}

repositories {
  mavenCentral()
  if (defaultNexusRepo != "unknown") {
    maven {
      url "$defaultNexusRepo"
      allowInsecureProtocol true
    }
  }
  maven { url "$defaultNexusRepo" }
  maven { url "$nexusBaseUrl/content/groups/public" }
  maven { url "$nexusBaseUrl/content/groups/interlok" }
  maven { url 'https://jitpack.io' }
}


configurations {
  umlDoclet {}
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

dependencies {
  implementation ('com.fasterxml.jackson.core:jackson-databind:2.12.5')
  implementation ('commons-cli:commons-cli:1.4')

  umlDoclet("nl.talsmasoftware:umldoclet:1.1.4")

  testImplementation ('org.junit.jupiter:junit-jupiter-engine:5.7.2')
  testImplementation ('commons-io:commons-io:2.11.0')

}


jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
  }
}


sourceSets {
  main {
    output.dir(versionDir, builtBy: 'generateVersion')
  }
}
// Generate the META-INF/adaptris-version file
task generateVersion {
  doLast {
    def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
    versionFile.getParentFile().mkdirs()
    ant.propertyfile(file: versionFile) {
      entry(key: 'component.name', value: componentName)
      entry(key: 'component.description', value: componentDesc)
      entry(key: 'groupId', value: project.group)
      entry(key: 'artifactId', value: project.name)
      entry(key: 'build.version', value: releaseVersion)
      entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
      entry(key: 'build.info', value: buildInfo())
    }
  }
}



javadoc {
  onlyIf {
    !hasGraphViz()
  }
  configure(options) {
    title= componentName
  }
}

test {
  useJUnitPlatform()
}


jacocoTestReport {
    reports {
        xml.required= true
        html.required= true
    }
}

task buildUnitTestProperties(type: Copy) {
  def propertyFile = propertyTemplate(testResourcesDir(), "unit-tests.properties.template")
  delete file(testResourcesDir() + "/unit-tests.properties")
  from file(testResourcesDir() + "/" + propertyFile)
  into (testResourcesDir())
  rename { String fileName ->
    fileName.replace(propertyFile, 'unit-tests.properties')
  }
  filter(ReplaceTokens, tokens: [JAVA_HOME: System.getProperty("java.home").replaceAll("\\\\", "/")])
  filter(ReplaceTokens, tokens: [BASE_DIR: project.projectDir.getCanonicalPath().replaceAll("\\\\", "/")])
  filter(ReplaceTokens, tokens: [BUILD_DIR: project.buildDir.getCanonicalPath().replaceAll("\\\\", "/")])
}

task deleteGeneratedFiles(type: Delete) {
  delete file(testResourcesDir() + "/unit-tests.properties"), delombokTargetDir
}


task deleteDerbyLog(type: Delete) {
  delete 'derby.log'
}


task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.extensions.delombokTask
}

task umlJavadoc(type: Javadoc) {
  group 'Documentation'
  description 'Build javadocs using plantuml + graphviz + umldoclet, if dot is available'

  onlyIf {
    hasGraphViz()
  }
  source = sourceSets.main.extensions.delombokTask
  classpath = project.sourceSets.main.compileClasspath
  configure(options) {
    options.docletpath = configurations.umlDoclet.files.asType(List)
    options.doclet = "nl.talsmasoftware.umldoclet.UMLDoclet"
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption "umlBasePath", destinationDir.getCanonicalPath()
    options.addStringOption "umlImageFormat", "SVG"
    options.addStringOption "umlExcludedReferences", "java.lang.Exception,java.lang.Object,java.lang.Enum"
    options.addStringOption "umlIncludePrivateClasses","false"
    options.addStringOption "umlIncludePackagePrivateClasses","false"
    options.addStringOption "umlIncludeProtectedClasses","false"
    options.addStringOption "umlIncludeAbstractSuperclassMethods","false"
    options.addStringOption "umlIncludeConstructors","false"
    options.addStringOption "umlIncludePublicFields","false"
    options.addStringOption "umlIncludePackagePrivateFields","false"
    options.addStringOption "umlIncludeProtectedFields", "false"
    options.addStringOption "umlIncludeDeprecatedClasses", "false"
    options.addStringOption "umlIncludePrivateInnerClasses", "false"
    options.addStringOption "umlIncludePackagePrivateInnerClasses", "false"
    options.addStringOption "umlIncludeProtectedInnerClasses","false"
    title= componentName
  }
}

delombok {
  target = delombokTargetDir
}

task lgtmCompile(type: JavaCompile, dependsOn: delombok) {
  group 'Build'
  description 'Compile for lgtm'

  source = sourceSets.main.extensions.delombokTask
  destinationDirectory= sourceSets.main.java.classesDirectory
  classpath = project.sourceSets.main.compileClasspath
}

artifacts {
  archives javadocJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact sourcesJar { classifier "sources" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
        def properties = asNode().appendNode("properties")
        properties.appendNode("tags", "verify,sonar")
        properties.appendNode("license", "false")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

spotbugsMain {
  effort = "max"
  reportLevel = "high"
  // showProgress = "true"
  effort = "max"
  // Ignore failures?
  // ignoreFailures = false
  reports {
    xml {
      enabled = false
    }
    html {
      enabled = true
    }
  }
  // includeFilter = new File("$rootDir/gradle/spotbugs-filter.xml")
  // excludeFilter = new File("$rootDir/gradle/spotbugs-exclude.xml")
}

// disable spotbugsTests which checks our test code..
spotbugsTest.enabled = false

installDist {
  destinationDir = new File(project.buildDir, 'staged')
}

dependencyCheck  {
  suppressionFiles= [ "https://raw.githubusercontent.com/adaptris/interlok/develop/gradle/owasp-exclude.xml" ]
  scanConfigurations = [ "api", "compileClasspath", "runtimeClasspath" ]
  formats = [ "HTML", "JUNIT" ]
  junitFailOnCVSS = 7.0
  failBuildOnCVSS = 7.0
  analyzers {
    assemblyEnabled=false
  }
}

javadoc.dependsOn umlJavadoc
processTestResources.dependsOn buildUnitTestProperties
clean.dependsOn deleteGeneratedFiles,deleteDerbyLog
check.dependsOn jacocoTestReport
